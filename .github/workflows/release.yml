name: Release Project

on:
  workflow_dispatch:
    inputs:
      changelog:
        type: string
        description: 'Changelog to replace the auto-generated one'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: 
          - ubuntu-24.04
          - ubuntu-24.04-arm
          - windows-2022
          - macos-13
          - macos-15

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      - uses: actions/setup-dotnet@v4
        if: ${{ matrix.os == 'windows-2022' }}
        with:
          dotnet-version: '9'
      - name: Install WiX
        if: ${{ matrix.os == 'windows-2022' }}
        run: |
          dotnet tool install --global wix --version 5.0.2
          wix extension add --global WixToolset.UI.wixext/5.0.2
      - name: Install Kotlin
        if: ${{ matrix.os != 'ubuntu-24.04-arm' }}
        uses: fwilhe2/setup-kotlin@main
        with:
          version: '2.1.10'
          install-native: true
      - name: Setup Konan
        if: ${{ matrix.os != 'ubuntu-24.04-arm' }}
        uses: actions/cache@v4
        with:
          path: |
            ~/.konan/caches
            ~/.konan/dependencies
            ~/.konan/kotlin-native-prebuilt-*
            /root/.konan/caches
            /root/.konan/dependencies
            /root/.konan/kotlin-native-prebuilt-*
          key: ${{ runner.os }}-${{ runner.arch }}-konan
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-konan
      - name: Setup Maven Settings
        if: ${{ matrix.os != 'ubuntu-24.04-arm' }}
        uses: s4u/maven-settings-action@v3.1.0
        with:
          servers: '[{"id": "calcugames", "username": "${{ secrets.MAVEN_USERNAME_CALCUGAMES }}", "password": "${{ secrets.MAVEN_PASSWORD_CALCUGAMES }}"}]'
      - name: Install Doxygen
        uses: ssciwr/doxygen-install@v1
      - name: Set Artifact ID
        if: ${{ matrix.os != 'ubuntu-24.04-arm' }}
        id: set_artifact_id
        run: |
          RUNNER_OS=$(echo ${{ runner.os }} | tr '[:upper:]' '[:lower:]')
          RUNNER_ARCH=$(echo ${{ runner.arch }} | tr '[:upper:]' '[:lower:]')
          echo "KN_INSTALL_ARTIFACTID=cmdfx-$RUNNER_OS-$RUNNER_ARCH" >> $GITHUB_ENV
        shell: bash
      - name: Link CInterop Command
        if: ${{ matrix.os == 'ubuntu-24.04' }}
        run: |
          sudo ln -s $KOTLIN_NATIVE_HOME/bin/cinterop /usr/local/bin/cinterop
          sudo ln -s $KOTLIN_NATIVE_HOME/bin/run_konan /usr/local/bin/run_konan
          sudo ln -s $KOTLIN_NATIVE_HOME/bin/kotlinc-native /usr/local/bin/kotlinc-native
      - name: Build Project (Posix)
        if: ${{ matrix.os != 'windows-2022' }}
        run: |
          cmake -B build -DKN_INSTALL_ARTIFACTID="${{ env.KN_INSTALL_ARTIFACTID }}" -DKN_CINTEROP_FILE_NAME="${{ env.KN_CINTEROP_FILE_NAME }}.klib" -DTEST_CMDFX=OFF
          cmake --build build --config Release
          cmake --build build --config Release --target docs klib
          cmake -B build
          cmake --build build --config Release --target package
          rm -rf build/build/package/_CPack_Packages/
      - name: Build Project (Windows)
        if: ${{ matrix.os == 'windows-2022' }}
        run: |
          cmake -B build -DKN_INSTALL_ARTIFACTID="${{ env.KN_INSTALL_ARTIFACTID }}" -DKN_CINTEROP_FILE_NAME="${{ env.KN_CINTEROP_FILE_NAME }}.klib" -DTEST_CMDFX=OFF
          cmake --build build --config Release
          cmake --build build --config Release --target docs klib
          cmake -B build
          cmake --build build --config Release --target package
          rm .\build\build\package\_CPack_Packages\ -R -Force
      - name: Publish Kotlin/Native Library (Posix)
        if: ${{ matrix.os != 'windows-2022' && matrix.os != 'ubuntu-24.04-arm' }}
        run: cmake --build build --config Release --target deploy-maven
      - name: Publish Kotlin/Native Library (Windows)
        if: ${{ matrix.os == 'windows-2022' }}
        run: cmake --build build --config Release --target deploy-maven
      - name: Archive Package Artifacts
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: CmdFX-Release-${{ runner.os }}-${{ runner.arch }}-${{ github.sha }}
          path: |
            build/build/package/*
            build/build/cinterop/*.klib
          overwrite: true
  release:
    needs: build
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Extract Version from CMakeLists.txt
        id: get_version
        run: |
          VERSION=$(grep -Po '(?<=set\(PROJECT_VERSION ")[^"]*' CMakeLists.txt)
          echo "Extracted Version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Retrieve Latest Tag
        id: latest_tag
        run: echo "LATEST_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
      - name: Download Release Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: CmdFX-Release-*
          path: build/package
          merge-multiple: true
      - name: Generate Changelog
        if: ${{ github.event.inputs.changelog == '' }}
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v5
        with:
          configuration: ".github/release.json"
          mode: "HYBRID"
          fromTag: "${{ env.LATEST_TAG }}"
          toTag: "master"
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: build/package/**/*
          tag_name: v${{ env.VERSION }}
          name: cmdfx v${{ env.VERSION }}
          body: ${{ steps.changelog.outputs.changelog || github.event.inputs.changelog }}
          draft: false
          prerelease: false


