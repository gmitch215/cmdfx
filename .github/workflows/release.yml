name: Release Project

on:
  workflow_dispatch:
    inputs:
      changelog:
        type: string
        description: "Changelog to replace the auto-generated one"

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-24.04
            id: linuxx64
          - os: ubuntu-24.04-arm
            id: linuxarm64
          - os: windows-2025
            id: mingwx64
          - os: macos-15-intel
            id: macosx64
          - os: macos-15
            id: macosarm64

    permissions:
      contents: read
      id-token: write
      attestations: write

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: "recursive"
      - uses: actions/setup-dotnet@v5
        if: ${{ matrix.os == 'windows-2025' }}
        with:
          dotnet-version: "9"
      - name: Setup Global Dotnet Tool Cache
        if: ${{ matrix.os == 'windows-2025' }}
        uses: actions/cache@v4
        with:
          path: ~/.dotnet/tools
          key: ${{ runner.os }}-${{ runner.arch }}-dotnet-tools
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-dotnet-tools
      - name: Install WiX & NSIS
        if: ${{ matrix.os == 'windows-2025' }}
        run: |
          dotnet tool install --global wix --version 5.0.2
          wix extension add --global WixToolset.UI.wixext/5.0.2
          choco install nsis
      - name: Install Kotlin
        if: ${{ matrix.os != 'ubuntu-24.04-arm' }}
        uses: fwilhe2/setup-kotlin@main
        with:
          version: "2.2.10"
          install-native: true
      - name: Setup Konan
        if: ${{ matrix.os != 'ubuntu-24.04-arm' }}
        uses: actions/cache@v4
        with:
          path: |
            ~/.konan/caches
            ~/.konan/dependencies
            ~/.konan/kotlin-native-prebuilt-*
            /root/.konan/caches
            /root/.konan/dependencies
            /root/.konan/kotlin-native-prebuilt-*
          key: ${{ runner.os }}-${{ runner.arch }}-konan
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-konan
      - name: Setup Maven Settings
        if: ${{ matrix.os != 'ubuntu-24.04-arm' }}
        uses: s4u/maven-settings-action@v4.0.0
        with:
          servers: '[{"id": "calcugames", "username": "${{ secrets.MAVEN_USERNAME_CALCUGAMES }}", "password": "${{ secrets.MAVEN_PASSWORD_CALCUGAMES }}"}]'
      - name: Install Doxygen
        uses: ssciwr/doxygen-install@v1
      - name: Link CInterop Command
        if: ${{ matrix.os == 'ubuntu-24.04' }}
        run: |
          sudo ln -s $KOTLIN_NATIVE_HOME/bin/cinterop /usr/local/bin/cinterop
          sudo ln -s $KOTLIN_NATIVE_HOME/bin/run_konan /usr/local/bin/run_konan
          sudo ln -s $KOTLIN_NATIVE_HOME/bin/kotlinc-native /usr/local/bin/kotlinc-native
      - name: Install Linux Dependencies
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
        run: |
          sudo apt-get update
          sudo apt-get install -y libasound2-dev
      - name: Configure Project (Posix)
        if: ${{ matrix.os != 'windows-2025' }}
        run: |
          cmake -B build -DKN_INSTALL_ARTIFACTID="cmdfx-${{ matrix.id }}" -DTEST_CMDFX=OFF
        shell: bash
      - name: Configure Project (Windows)
        if: ${{ matrix.os == 'windows-2025' }}
        run: |
          cmake -B build -G "MinGW Makefiles" -DKN_INSTALL_ARTIFACTID="cmdfx-${{ matrix.id }}" -DTEST_CMDFX=OFF
        shell: bash
      - name: Build Project
        run: |
          cmake --build build --config Release --target docs
          cmake -B build
          cmake --build build --config Release --target package
          rm -rf build/package/_CPack_Packages/
        shell: bash
      - name: Publish Kotlin/Native Library
        run: |
          cmake -B build -DDEPLOY_CMDFX=ON
          cmake --build build --config Release
      - name: Archive Package Artifacts
        id: archive
        if: success() || failure()
        uses: actions/upload-artifact@v5
        with:
          name: CmdFX-Release-${{ runner.os }}-${{ runner.arch }}-${{ github.sha }}
          path: build/package/*
          overwrite: true
      - name: Attest Build Artifacts
        if: success() || failure()
        uses: actions/attest-build-provenance@v3
        with:
          subject-name: CmdFX-Release-${{ runner.os }}-${{ runner.arch }}-${{ github.sha }}
          subject-digest: sha256:${{ steps.archive.outputs.artifact-digest }}
  release:
    needs: build
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Extract Version from CMakeLists.txt
        id: get_version
        run: |
          VERSION=$(grep -Po '(?<=set\(PROJECT_VERSION ")[^"]*' CMakeLists.txt)
          echo "Extracted Version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Retrieve Latest Tag
        id: latest_tag
        run: echo "LATEST_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
      - name: Download Release Artifacts
        uses: actions/download-artifact@v6
        with:
          pattern: CmdFX-Release-*
          path: build/package
          merge-multiple: true
      - name: Generate Changelog
        if: ${{ github.event.inputs.changelog == '' }}
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v6
        with:
          configuration: ".github/release.json"
          mode: "HYBRID"
          fromTag: "${{ env.LATEST_TAG }}"
          toTag: "master"
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: build/package/**/*
          tag_name: v${{ env.VERSION }}
          name: cmdfx v${{ env.VERSION }}
          body: ${{ steps.changelog.outputs.changelog || github.event.inputs.changelog }}
          draft: false
          prerelease: false
